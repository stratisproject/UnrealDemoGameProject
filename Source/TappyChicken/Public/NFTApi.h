/**
 * NOTE: This class is auto generated by  Generator
 * https://github.com/Tools/-generator
 * Do not edit the class manually.
 */

#pragma once

#include "BaseModel.h"
#include "CoreMinimal.h"

namespace stratis {
namespace nft {

class TAPPYCHICKEN_API NFTApi {
public:
  NFTApi();
  ~NFTApi();

  /* Adds global header params to all requests */
  void AddHeaderParam(const FString &Key, const FString &Value);
  void ClearHeaderParams();

  /* Sets the retry manager to the user-defined retry manager. User must manage
   * the lifetime of the retry manager. If no retry manager is specified and a
   * request needs retries, a default retry manager will be used. See also:
   * Request::SetShouldRetry */
  void SetHttpRetryManager(FHttpRetrySystem::FManager &RetryManager);
  FHttpRetrySystem::FManager &GetHttpRetryManager();

  class GetNFTInfoRequest;
  class GetNFTInfoResponse;

  DECLARE_DELEGATE_OneParam(FGetNFTInfoDelegate, const GetNFTInfoResponse &);

  FHttpRequestPtr
  GetNFTInfo(const GetNFTInfoRequest &Request,
             const FGetNFTInfoDelegate &Delegate = FGetNFTInfoDelegate()) const;

private:
  void OnGetNFTInfoResponse(FHttpRequestPtr HttpRequest,
                            FHttpResponsePtr HttpResponse, bool bSucceeded,
                            FGetNFTInfoDelegate Delegate) const;

  FHttpRequestRef CreateHttpRequest(const Request &Request) const;
  bool IsValid() const;
  void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded,
                      Response &InOutResponse) const;

  TMap<FString, FString> AdditionalHeaderParams;
  mutable FHttpRetrySystem::FManager *RetryManager = nullptr;
  mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

} // namespace nft
} // namespace stratis
