/**
 * NOTE: This class is auto generated by  Generator
 * https://github.com/Tools/-generator
 * Do not edit the class manually.
 */

#include "NFTInfoAttributes.h"

#include "Helpers.h"
#include "Log.h"

#include "Templates/SharedPointer.h"

namespace stratis {
namespace nft {

void NFTInfoAttributes::WriteJson(JsonWriter &Writer) const {
  Writer->WriteObjectStart();
  if (TraitType.IsSet()) {
    Writer->WriteIdentifierPrefix(TEXT("trait_type"));
    WriteJsonValue(Writer, TraitType.GetValue());
  }
  if (Value.IsSet()) {
    Writer->WriteIdentifierPrefix(TEXT("value"));
    WriteJsonValue(Writer, Value.GetValue());
  }
  if (DisplayType.IsSet()) {
    Writer->WriteIdentifierPrefix(TEXT("display_type"));
    WriteJsonValue(Writer, DisplayType.GetValue());
  }
  Writer->WriteObjectEnd();
}

bool NFTInfoAttributes::FromJson(const TSharedPtr<FJsonValue> &JsonValue) {
  const TSharedPtr<FJsonObject> *Object;
  if (!JsonValue->TryGetObject(Object))
    return false;

  bool ParseSuccess = true;

  ParseSuccess &= TryGetJsonValue(*Object, TEXT("trait_type"), TraitType);
  ParseSuccess &= TryGetJsonValue(*Object, TEXT("value"), Value);
  ParseSuccess &= TryGetJsonValue(*Object, TEXT("display_type"), DisplayType);

  return ParseSuccess;
}

} // namespace nft
} // namespace stratis
