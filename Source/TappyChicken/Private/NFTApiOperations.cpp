/**
 * NOTE: This class is auto generated by  Generator
 * https://github.com/Tools/-generator
 * Do not edit the class manually.
 */

#include "NFTApiOperations.h"

#include "Helpers.h"
#include "Log.h"

#include "Dom/JsonObject.h"
#include "HttpModule.h"
#include "PlatformHttp.h"
#include "Templates/SharedPointer.h"

namespace stratis {
namespace nft {

FString NFTApi::GetNFTInfoRequest::ComputePath() const {
  return this->NFTInfoPath;
}

void NFTApi::GetNFTInfoRequest::SetupHttpRequest(
    const FHttpRequestRef &HttpRequest) const {
  static const TArray<FString> Consumes = {};
  // static const TArray<FString> Produces = { TEXT("application/json") };

  HttpRequest->SetVerb(TEXT("GET"));

  // Default to Json Body request
  if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json"))) {
    // Form parameters
    FString JsonBody;
    JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);
    Writer->WriteObjectStart();
    Writer->WriteObjectEnd();
    Writer->Close();
    HttpRequest->SetHeader(TEXT("Content-Type"),
                           TEXT("application/json; charset=utf-8"));
    HttpRequest->SetContentAsString(JsonBody);
  } else if (Consumes.Contains(TEXT("multipart/form-data"))) {
  } else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded"))) {
  } else {
    UE_LOG(LogNFT, Error, TEXT("Request ContentType not supported (%s)"),
           *FString::Join(Consumes, TEXT(",")));
  }
}

void NFTApi::GetNFTInfoResponse::SetHttpResponseCode(
    EHttpResponseCodes::Type InHttpResponseCode) {
  Response::SetHttpResponseCode(InHttpResponseCode);
  switch ((int)InHttpResponseCode) {
  case 200:
    SetResponseString(TEXT("successful operation"));
    break;
  case 400:
    SetResponseString(TEXT("Invalid status value"));
    break;
  }
}

bool NFTApi::GetNFTInfoResponse::FromJson(
    const TSharedPtr<FJsonValue> &JsonValue) {
  return TryGetJsonValue(JsonValue, Content);
}

} // namespace nft
} // namespace stratis
