/**
 * NOTE: This class is auto generated by  Generator
 * https://github.com/Tools/-generator
 * Do not edit the class manually.
 */

#include "BaseModel.h"

namespace stratis {
namespace nft {

bool HttpRetryManager::Tick(float DeltaTime) {
  FManager::Update();
  return true;
}

HttpRetryParams::HttpRetryParams(
    const FRetryLimitCountSetting
        &InRetryLimitCountOverride /*= FRetryLimitCountSetting()*/,
    const FRetryTimeoutRelativeSecondsSetting &
        InRetryTimeoutRelativeSecondsOverride /*=
                                                 FRetryTimeoutRelativeSecondsSetting()*/
    ,
    const FRetryResponseCodes &InRetryResponseCodes /*= FRetryResponseCodes()*/,
    const FRetryVerbs &InRetryVerbs /*= FRetryVerbs()*/,
    const FRetryDomainsPtr &InRetryDomains /*= FRetryDomainsPtr() */)
    : RetryLimitCountOverride(InRetryLimitCountOverride),
      RetryTimeoutRelativeSecondsOverride(
          InRetryTimeoutRelativeSecondsOverride),
      RetryResponseCodes(InRetryResponseCodes), RetryVerbs(InRetryVerbs),
      RetryDomains(InRetryDomains) {}

void Response::SetHttpResponseCode(
    EHttpResponseCodes::Type InHttpResponseCode) {
  ResponseCode = InHttpResponseCode;
  SetSuccessful(EHttpResponseCodes::IsOk(InHttpResponseCode));
  if (InHttpResponseCode == EHttpResponseCodes::RequestTimeout) {
    SetResponseString(TEXT("Request Timeout"));
  }
}

} // namespace nft
} // namespace stratis
